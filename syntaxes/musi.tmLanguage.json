{
  "name": "musi",
  "scopeName": "source.musi",
  "patterns": [
    { "include": "#type_annotations" },
    {
      "match": "\\|\\s*([A-Z][A-Za-z][A-Za-z0-9]*)\\(([^)]*)\\)",
      "captures": {
        "1": { "name": "entity.name.type.musi" },
        "2": {
          "patterns": [
            { "include": "#type_annotations" },
            {
              "match": "\\b[a-z][a-z0-9_]*\\b",
              "name": "variable.parameter.musi"
            }
          ]
        }
      }
    },
    { "include": "#comments" },
    { "include": "#strings" },
    { "include": "#functions" },
    { "include": "#keywords" },
    { "include": "#operators" },
    { "include": "#constants" },
    { "include": "#types" },
    { "include": "#variables" }
  ],
  "repository": {
    "type_annotations": {
      "patterns": [
        {
          "match": "(:|->)\\s*([A-Z][A-Za-z0-9_]*)",
          "captures": { "2": { "name": "entity.name.type.musi" } }
        }
      ]
    },
    "comments": {
      "match": "#.*$",
      "name": "comment.line.number-sign.musi"
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.triple.musi",
          "begin": "\"\"\"",
          "end": "\"\"\"",
          "patterns": [
            {
              "name": "constant.character.escape.musi",
              "match": "\\\\([ntr\"'\\\\bfv0]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})"
            },
            {
              "name": "meta.template.expression.musi",
              "begin": "\\{",
              "beginCaptures": { "0": { "name": "punctuation.section.embedded.begin.musi" } },
              "end": "\\}",
              "endCaptures": { "0": { "name": "punctuation.section.embedded.end.musi" } },
              "patterns": [
                { "include": "#variables" },
                { "include": "$self" }
              ]
            }
          ]
        },
        {
          "name": "string.quoted.double.raw.musi",
          "begin": "r\"",
          "end": "\"",
          "patterns": [ ]
        },
        {
          "name": "string.quoted.double.musi",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.musi",
              "match": "\\\\([ntr\"'\\\\bfv0]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})"
            },
            {
              "name": "meta.template.expression.musi",
              "begin": "\\{",
              "beginCaptures": { "0": { "name": "punctuation.section.embedded.begin.musi" } },
              "end": "\\}",
              "endCaptures": { "0": { "name": "punctuation.section.embedded.end.musi" } },
              "patterns": [
                { "include": "#variables" },
                { "include": "$self" }
              ]
            }
          ]
        },
        {
          "name": "string.quoted.single.musi",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.musi",
              "match": "\\\\[ntr'\\\\bfv0]"
            }
          ]
        },
        {
          "name": "string.quoted.double.byte.musi",
          "begin": "b\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.musi",
              "match": "\\\\([ntr\"'\\\\bfv0]|x[0-9a-fA-F]{2})"
            }
          ]
        },
        {
          "name": "string.quoted.single.byte.musi",
          "begin": "b'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.musi",
              "match": "\\\\([ntr'\\\\bfv0]|x[0-9a-fA-F]{2})"
            }
          ]
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "match": "\\b(async\\s+)?(def)\\s+([a-z_][a-z0-9_]*)\\s*\\(([^)]*)\\)\\s*(->\\s*[A-Z][A-Za-z0-9_]*)?",
          "captures": {
            "1": { "name": "keyword.other.musi" },
            "2": { "name": "storage.type.musi" },
            "3": { "name": "entity.name.function.musi" },
            "4": {
              "patterns": [
                { "include": "#type_annotations" },
                {
                  "match": "\\b[a-z][a-z0-9_]*\\b",
                  "name": "variable.parameter.musi"
                }
              ]
            },
            "5": { "patterns": [ { "include": "#type_annotations" } ] }
          }
        },
        {
          "match": "\\b([a-z_][a-z0-9_]*)(?=\\()",
          "captures": { "1": { "name": "support.function.musi" } }
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.musi",
          "match": "\\b(break|continue|do|else|for|if|in|is|match|of|repeat|return|then|to|until|when|while|with|yield)\\b"
        },
        {
          "name": "keyword.control.logical.musi",
          "match": "\\b(and|not|or)\\b"
        },
        {
          "name": "storage.modifier.musi",
          "match": "\\b(const|deref|inline|let|ref|unsafe|var)\\b"
        },
        {
          "name": "storage.type.musi",
          "match": "\\b(type)\\b"
        },
        {
          "name": "keyword.other.musi",
          "match": "\\b(as|at|async|await|foreign|from|import|where)\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.arithmetic.musi",
          "match": "\\+|-|\\*|/|%|\\*\\*"
        },
        {
          "name": "keyword.operator.assignment.musi",
          "match": "=|:=|\\+=|-=|\\*=|/=|%=|\\*\\*=|&=|\\|=|\\^=|<<=|>>="
        },
        {
          "name": "keyword.operator.comparison.musi",
          "match": "==|!=|<|<=|>|>=|~="
        },
        {
          "name": "keyword.operator.other.musi",
          "match": "\\.|:|->|=>"
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "name": "constant.character.escape.musi",
          "match": "\\\\([ntr\"'\\\\bfv0]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})"
        },
        {
          "name": "constant.language.musi",
          "match": "\\b([Tt]rue|[Ff]alse)\\b"
        },
        {
          "name": "constant.numeric.musi",
          "match": "\\b(0[xX][0-9a-fA-F]+|0[bB][01]+|0[oO][0-7]+|\\d+(\\.\\d+)?([eE][+-]?\\d+)?)\\b"
        },
        {
          "name": "constant.regexp.musi",
          "match": "/([^/\\\\]|\\\\.)*/"
        },
        {
          "name": "variable.other.constant.musi",
          "match": "\\b[A-Z][A-Z0-9_]+\\b(?!\\s*\\()"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "support.type.constant.musi",
          "match": "\\b(Boolean|Character|String|Integer|Natural|Real)\\b"
        },
        {
          "name": "support.type.optional.musi",
          "match": "\\b(Some|None)\\b"
        },
        {
          "name": "support.type.expected.musi",
          "match": "\\b(Left|Right)\\b"
        },
        {
          "name": "entity.name.type.musi",
          "match": "\\b[A-Z][A-Za-z0-9]*\\b(?!\\s*\\()"
        },
        {
          "match": "\\[([A-Z][A-Za-z0-9]*)\\]",
          "captures": { "1": { "name": "entity.name.type.generic.musi" } }
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "match": "\\b(const)\\s+([A-Z][A-Z0-9_]*)\\b",
          "captures": {
            "1": { "name": "storage.modifier.musi" },
            "2": { "name": "variable.other.constant.musi" }
          }
        },
        {
          "match": "\\b(let|var)\\s+([a-z][a-z0-9_]*)\\b",
          "captures": {
            "1": { "name": "storage.modifier.musi" },
            "2": { "name": "variable.other.musi" }
          }
        },
        {
          "name": "variable.other.musi",
          "match": "\\b[a-z][a-z0-9_]*\\b"
        }
      ]
    }
  }
}
